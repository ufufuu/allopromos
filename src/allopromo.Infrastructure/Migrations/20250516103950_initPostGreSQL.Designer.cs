// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using allopromo.Infrastructure.Data;

namespace allopromo.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250516103950_initPostGreSQL")]
    partial class initPostGreSQL
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "6b3beb85-8d21-4c0f-9bf1-28108de88b47",
                            ConcurrencyStamp = "2ed31ebb-8245-4b35-9caf-424f8015577e",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        },
                        new
                        {
                            Id = "3698097a-6314-4c0a-b338-982bb76831d7",
                            ConcurrencyStamp = "5d49748d-7a4b-4de4-bb64-59bce902daa7",
                            Name = "Merchants",
                            NormalizedName = "MERCHANTS"
                        },
                        new
                        {
                            Id = "7f7da027-4f39-42df-b2da-b37715c03d04",
                            ConcurrencyStamp = "48d11d01-c326-4996-99e8-2b136e884458",
                            Name = "Users",
                            NormalizedName = "USERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("allopromo.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("firstName")
                        .HasColumnType("text");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("isMerchant")
                        .HasColumnType("boolean");

                    b.Property<string>("lastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<int>("Type").HasValue(1);
                });

            modelBuilder.Entity("allopromo.Core.Entities.City", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("cityCountrycountryId")
                        .HasColumnType("integer");

                    b.Property<string>("cityName")
                        .HasColumnType("text");

                    b.HasKey("cityId");

                    b.HasIndex("cityCountrycountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Country", b =>
                {
                    b.Property<int>("countryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("countryName")
                        .HasColumnType("text");

                    b.Property<int?>("regionId")
                        .HasColumnType("integer");

                    b.HasKey("countryId");

                    b.HasIndex("regionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Department", b =>
                {
                    b.Property<string>("departmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("departmentId");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate");

                    b.Property<string>("departmentName")
                        .HasColumnType("text")
                        .HasColumnName("departmentName");

                    b.Property<string>("departmentThumbnail")
                        .HasColumnType("text")
                        .HasColumnName("departmentThumbnail");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("departmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Order", b =>
                {
                    b.Property<int>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("createOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customerId")
                        .HasColumnType("text");

                    b.Property<int>("orderDate")
                        .HasColumnType("integer");

                    b.Property<int>("orderNumber")
                        .HasColumnType("integer");

                    b.Property<string>("storeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("updateOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("orderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Product", b =>
                {
                    b.Property<string>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int?>("productCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("productDescription")
                        .HasColumnType("text");

                    b.Property<string>("productName")
                        .HasColumnType("text");

                    b.Property<int>("productStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("storeId")
                        .HasColumnType("uuid");

                    b.HasKey("productId");

                    b.HasIndex("productCategoryId");

                    b.HasIndex("storeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("allopromo.Core.Entities.ProductCategory", b =>
                {
                    b.Property<int>("productCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("productCategoryName")
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("productCategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Region", b =>
                {
                    b.Property<int>("regionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("regionName")
                        .HasColumnType("text");

                    b.HasKey("regionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Store", b =>
                {
                    b.Property<Guid>("storeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("storeId");

                    b.Property<Guid?>("CategorystoreCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int?>("cityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("storeBecomesInactiveOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("storeExpires");

                    b.Property<DateTime>("storeCreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("storeCreatedOn");

                    b.Property<string>("storeDescription")
                        .HasColumnType("text")
                        .HasColumnName("storeDescription");

                    b.Property<string>("storeName")
                        .HasColumnType("text")
                        .HasColumnName("storeName");

                    b.HasKey("storeId");

                    b.HasIndex("CategorystoreCategoryId");

                    b.HasIndex("UserId");

                    b.HasIndex("cityId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("allopromo.Core.Entities.StoreCategory", b =>
                {
                    b.Property<Guid>("storeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("categoryId");

                    b.Property<bool>("active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("storeCreated");

                    b.Property<string>("departmentId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("expires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("storeExpires");

                    b.Property<string>("storeCategoryName")
                        .HasColumnType("text")
                        .HasColumnName("storeCategoryName");

                    b.HasKey("storeCategoryId");

                    b.HasIndex("departmentId");

                    b.ToTable("StoreCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("allopromo.Core.Entities.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("allopromo.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("allopromo.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allopromo.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("allopromo.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("allopromo.Core.Entities.City", b =>
                {
                    b.HasOne("allopromo.Core.Entities.Country", "cityCountry")
                        .WithMany("Cities")
                        .HasForeignKey("cityCountrycountryId");

                    b.Navigation("cityCountry");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Country", b =>
                {
                    b.HasOne("allopromo.Core.Entities.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("regionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Product", b =>
                {
                    b.HasOne("allopromo.Core.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("productCategoryId");

                    b.HasOne("allopromo.Core.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("storeId");

                    b.Navigation("ProductCategory");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Store", b =>
                {
                    b.HasOne("allopromo.Core.Entities.StoreCategory", "Category")
                        .WithMany("Stores")
                        .HasForeignKey("CategorystoreCategoryId");

                    b.HasOne("allopromo.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("allopromo.Core.Entities.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId");

                    b.Navigation("Category");

                    b.Navigation("city");

                    b.Navigation("User");
                });

            modelBuilder.Entity("allopromo.Core.Entities.StoreCategory", b =>
                {
                    b.HasOne("allopromo.Core.Entities.Department", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("departmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("allopromo.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Department", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("allopromo.Core.Entities.Region", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("allopromo.Core.Entities.StoreCategory", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
