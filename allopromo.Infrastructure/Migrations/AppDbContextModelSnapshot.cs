// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using allopromo.Infrastructure.Data;

namespace allopromo.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("allopromo.Core.Domain.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRole");
                });

            modelBuilder.Entity("allopromo.Core.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<int>("Type").HasValue(1);
                });

            modelBuilder.Entity("allopromo.Core.Entities.tCity", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cityGpsLatitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cityGpsLongitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("countryId")
                        .HasColumnType("int");

                    b.Property<int?>("tCountrycountryId")
                        .HasColumnType("int");

                    b.HasKey("cityId");

                    b.HasIndex("tCountrycountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tCountry", b =>
                {
                    b.Property<int>("countryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("countryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("countryRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("regionId")
                        .HasColumnType("int");

                    b.HasKey("countryId");

                    b.HasIndex("regionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tDepartment", b =>
                {
                    b.Property<string>("departmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("departmentId");

                    b.Property<string>("departmentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("departmentName");

                    b.Property<string>("departmentThumbnail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("departmentThumbnail");

                    b.HasKey("departmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tProduct", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("productCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("productDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productStatus")
                        .HasColumnType("int");

                    b.Property<string>("storeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("storeId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("productId");

                    b.HasIndex("productCategoryId");

                    b.HasIndex("storeId1");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tProductCategory", b =>
                {
                    b.Property<int>("productCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("productCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("productCategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tRegion", b =>
                {
                    b.Property<int>("regionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("regionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("regionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tStore", b =>
                {
                    b.Property<Guid>("storeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("storeId");

                    b.Property<Guid?>("CategorystoreCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("cityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("storeBecomesInactiveOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("storeBecomesInactiveOn");

                    b.Property<DateTime>("storeCreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("storeCreatedOn");

                    b.Property<string>("storeDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("storeDescription");

                    b.Property<string>("storeName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("storeName");

                    b.Property<int>("storeStatus")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("storeId");

                    b.HasIndex("CategorystoreCategoryId");

                    b.HasIndex("cityId");

                    b.HasIndex("userId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tStoreCategory", b =>
                {
                    b.Property<Guid>("storeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("categoryId");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("departmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("storeCategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("categoryName");

                    b.HasKey("storeCategoryId");

                    b.HasIndex("departmentId");

                    b.ToTable("StoreCategories");
                });

            modelBuilder.Entity("allopromo.Core.Domain.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("allopromo.Core.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("allopromo.Core.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allopromo.Core.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("allopromo.Core.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("allopromo.Core.Entities.tCity", b =>
                {
                    b.HasOne("allopromo.Core.Entities.tCountry", null)
                        .WithMany("Cities")
                        .HasForeignKey("tCountrycountryId");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tCountry", b =>
                {
                    b.HasOne("allopromo.Core.Entities.tRegion", "Region")
                        .WithMany()
                        .HasForeignKey("regionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tProduct", b =>
                {
                    b.HasOne("allopromo.Core.Entities.tProductCategory", "ProductCategory")
                        .WithMany("categoryProducts")
                        .HasForeignKey("productCategoryId");

                    b.HasOne("allopromo.Core.Entities.tStore", "Store")
                        .WithMany()
                        .HasForeignKey("storeId1");

                    b.Navigation("ProductCategory");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tStore", b =>
                {
                    b.HasOne("allopromo.Core.Entities.tStoreCategory", "Category")
                        .WithMany("Stores")
                        .HasForeignKey("CategorystoreCategoryId");

                    b.HasOne("allopromo.Core.Entities.tCity", "City")
                        .WithMany()
                        .HasForeignKey("cityId");

                    b.HasOne("allopromo.Core.Domain.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("user");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tStoreCategory", b =>
                {
                    b.HasOne("allopromo.Core.Entities.tDepartment", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("departmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("allopromo.Core.Domain.ApplicationUserRole", b =>
                {
                    b.HasOne("allopromo.Core.Domain.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("allopromo.Core.Domain.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("allopromo.Core.Domain.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("allopromo.Core.Domain.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tCountry", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tDepartment", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tProductCategory", b =>
                {
                    b.Navigation("categoryProducts");
                });

            modelBuilder.Entity("allopromo.Core.Entities.tStoreCategory", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
